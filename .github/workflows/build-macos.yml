name: Build macOS App

on:
  workflow_dispatch: {}

env:
  SCHEME: VoiceInk
  CONFIGURATION: Release

jobs:
  build:
    runs-on: macos-15

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Select Xcode 16
        run: sudo xcode-select -s /Applications/Xcode_16.app

      - name: Show Xcode version
        run: xcodebuild -version

      # 1) 按 BUILDING.md：克隆并构建 ggerganov/whisper.cpp -> build-apple/whisper.xcframework
      - name: Install deps for whisper.cpp
        run: brew update && brew install cmake

      - name: Clone whisper.cpp (ggerganov)
        run: |
          set -e
          if [ ! -d whisper.cpp ]; then
            git clone --depth=1 https://github.com/ggerganov/whisper.cpp.git whisper.cpp
          fi
          echo "== whisper.cpp tree =="
          ls -la whisper.cpp

      - name: Build whisper.xcframework
        run: |
          set -e
          cd whisper.cpp
          bash ./build-xcframework.sh
          echo "== after build =="
          ls -la build-apple || true
          test -d build-apple/whisper.xcframework || { echo "❌ whisper.xcframework not found at build-apple/whisper.xcframework"; exit 1; }

      # 2) 选择 VoiceInk 的工程文件（排除 whisper.cpp），优先 VoiceInk*.xcworkspace/.xcodeproj
      - name: Detect project file (exclude whisper.cpp)
        id: detect
        shell: bash
        run: |
          set -e
          FILE="$(find . -path './whisper.cpp' -prune -o -name 'VoiceInk*.xcworkspace' -type d -print -quit)"
          KIND=""
          if [ -n "$FILE" ]; then
            KIND="workspace"
          else
            FILE="$(find . -path './whisper.cpp' -prune -o -name '*.xcworkspace' -type d -print | head -n 1)"
            if [ -n "$FILE" ]; then
              KIND="workspace"
            else
              FILE="$(find . -path './whisper.cpp' -prune -o -name 'VoiceInk*.xcodeproj' -type d -print -quit)"
              if [ -n "$FILE" ]; then
                KIND="project"
              else
                FILE="$(find . -path './whisper.cpp' -prune -o -name '*.xcodeproj' -type d -print | head -n 1)"
                [ -n "$FILE" ] && KIND="project"
              fi
            fi
          fi
          [ -z "$FILE" ] && { echo "❌ No .xcworkspace or .xcodeproj found (excluding whisper.cpp)"; exit 1; }
          DIR="$(dirname "$FILE")"
          echo "kind=$KIND" >> "$GITHUB_OUTPUT"
          echo "file=$FILE" >> "$GITHUB_OUTPUT"
          echo "dir=$DIR"  >> "$GITHUB_OUTPUT"
          echo "✅ Selected $KIND: $FILE"

      # （可留作调试）列出 schemes
      - name: List all schemes (debug)
        shell: bash
        run: |
          set -e
          cd "${{ steps.detect.outputs.dir }}"
          BASE="$(basename "${{ steps.detect.outputs.file }}")"
          echo "=== xcodebuild -list for $BASE ==="
          if [ "${{ steps.detect.outputs.kind }}" = "workspace" ]; then
            xcodebuild -workspace "$BASE" -list
          else
            xcodebuild -project "$BASE" -list
          fi
          echo "=== end list ==="

      # 3) 构建主应用 Scheme：VoiceInk
      - name: Build VoiceInk
        shell: bash
        run: |
          set -e
          cd "${{ steps.detect.outputs.dir }}"
          DERIVED_DIR="$RUNNER_TEMP/DerivedData"
          BASE="$(basename "${{ steps.detect.outputs.file }}")"
          FLAGS="CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= ONLY_ACTIVE_ARCH=NO ENABLE_HARDENED_RUNTIME=NO -destination 'generic/platform=macOS' -configuration ${CONFIGURATION} -scheme '${SCHEME}' -derivedDataPath $DERIVED_DIR"
          echo "🏗  Building $BASE scheme=${SCHEME}"
          if [ "${{ steps.detect.outputs.kind }}" = "workspace" ]; then
            eval xcodebuild -workspace "\"$BASE\"" $FLAGS build
          else
            eval xcodebuild -project "\"$BASE\"" $FLAGS build
          fi
          echo "DERIVED_DIR=$DERIVED_DIR" >> "$GITHUB_ENV"

      - name: Locate .app product
        id: findapp
        shell: bash
        run: |
          set -e
          echo "== Products tree =="
          find "$DERIVED_DIR/Build/Products" -maxdepth 4 -type d -print || true
          APP_PATH="$(find "$DERIVED_DIR/Build/Products/${CONFIGURATION}" -maxdepth 4 -name '*.app' -print -quit)"
          if [ -z "$APP_PATH" ]; then
            echo "❌ No .app found under $DERIVED_DIR/Build/Products/${CONFIGURATION}"
            exit 1
          fi
          echo "app=$APP_PATH" >> "$GITHUB_OUTPUT"
          echo "✅ Found app: $APP_PATH"

      - name: Zip app
        if: steps.findapp.outputs.app != ''
        shell: bash
        run: |
          set -e
          APP="${{ steps.findapp.outputs.app }}"
          cd "$(dirname "$APP")"
          zip -r "VoiceInk.app.zip" "$(basename "$APP")"

      - name: Upload artifact
        if: steps.findapp.outputs.app != ''
        uses: actions/upload-artifact@v4
        with:
          name: VoiceInk.app
          path: |
            ${{ steps.findapp.outputs.app }}
            $(dirname ${{ steps.findapp.outputs.app }})/VoiceInk.app.zip
          if-no-files-found: error
