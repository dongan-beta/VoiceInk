name: Build macOS App

on:
  workflow_dispatch: {}

jobs:
  build:
    runs-on: macos-15

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Select Xcode 16
        run: sudo xcode-select -s /Applications/Xcode_16.app

      - name: Show Xcode version
        run: xcodebuild -version

      # 递归寻找 .xcworkspace / .xcodeproj
      - name: Detect project file (recursive)
        id: detect
        shell: bash
        run: |
          set -e
          FILE="$(find . -name '*.xcworkspace' -type d | head -n 1 || true)"
          if [ -n "$FILE" ]; then
            KIND="workspace"
          else
            FILE="$(find . -name '*.xcodeproj' -type d | head -n 1 || true)"
            [ -n "$FILE" ] && KIND="project"
          fi
          [ -z "$FILE" ] && { echo "❌ No .xcworkspace or .xcodeproj found"; exit 1; }
          DIR="$(dirname "$FILE")"
          echo "kind=$KIND" >> "$GITHUB_OUTPUT"
          echo "file=$FILE" >> "$GITHUB_OUTPUT"
          echo "dir=$DIR"  >> "$GITHUB_OUTPUT"
          echo "Found $KIND: $FILE"

      # 自动探测第一个可用 Scheme（优先 shared schemes）
      - name: Detect scheme
        id: scheme
        shell: bash
        run: |
          set -e
          cd "${{ steps.detect.outputs.dir }}"
          BASE="$(basename "${{ steps.detect.outputs.file }}")"
          if [ "${{ steps.detect.outputs.kind }}" = "workspace" ]; then
            LIST_JSON="$(xcodebuild -workspace "$BASE" -list -json)"
          else
            LIST_JSON="$(xcodebuild -project "$BASE" -list -json)"
          fi
          SCHEME="$(echo "$LIST_JSON" | /usr/bin/python3 -c "import sys,json; j=json.load(sys.stdin); c=j.get('workspace') or j.get('project') or {}; s=(c.get('schemes') or c.get('targets') or [''])[0]; print(s)")"
          [ -z "$SCHEME" ] && { echo "❌ No scheme found (make sure Scheme is Shared)"; echo "$LIST_JSON"; exit 1; }
          echo "name=$SCHEME" >> "$GITHUB_OUTPUT"
          echo "Detected scheme: $SCHEME"

      - name: Build
        shell: bash
        env:
          CONFIGURATION: Release
        run: |
          set -e
          cd "${{ steps.detect.outputs.dir }}"
          DERIVED_DIR="$RUNNER_TEMP/DerivedData"
          BASE="$(basename "${{ steps.detect.outputs.file }}")"
          FLAGS="CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= ONLY_ACTIVE_ARCH=NO ENABLE_HARDENED_RUNTIME=NO -configuration ${CONFIGURATION} -scheme '${{ steps.scheme.outputs.name }}' -derivedDataPath $DERIVED_DIR"
          if [ "${{ steps.detect.outputs.kind }}" = "workspace" ]; then
            eval xcodebuild -workspace "\"$BASE\"" $FLAGS build
          else
            eval xcodebuild -project "\"$BASE\"" $FLAGS build
          fi
          echo "DERIVED_DIR=$DERIVED_DIR" >> "$GITHUB_ENV"

      - name: Locate .app product
        id: findapp
        shell: bash
        run: |
          set -e
          APP_PATH="$(find "$DERIVED_DIR/Build/Products/Release" -maxdepth 4 -name '*.app' -print -quit)"
          [ -z "$APP_PATH" ] && { echo "❌ No .app found under $DERIVED_DIR/Build/Products/Release"; find "$DERIVED_DIR/Build/Products" -maxdepth 4 -type d -print || true; exit 1; }
          echo "app=$APP_PATH" >> "$GITHUB_OUTPUT"
          echo "Found app: $APP_PATH"

      - name: Zip app
        shell: bash
        run: |
          set -e
          APP="${{ steps.findapp.outputs.app }}"
          cd "$(dirname "$APP")"
          zip -r "VoiceInk.app.zip" "$(basename "$APP")"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: VoiceInk.app
          path: |
            ${{ steps.findapp.outputs.app }}
            $(dirname ${{ steps.findapp.outputs.app }})/VoiceInk.app.zip
          if-no-files-found: error
