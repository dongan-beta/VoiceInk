name: Build macOS App

on:
  workflow_dispatch: {}

jobs:
  build:
    runs-on: macos-15   # 带 Xcode 16 的 runner
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Select Xcode 16
        run: sudo xcode-select -s /Applications/Xcode_16.app

      - name: Show Xcode version
        run: xcodebuild -version

      # 递归寻找 .xcworkspace 或 .xcodeproj
      - name: Detect project file (recursive)
        id: detect
        shell: bash
        run: |
          set -e
          FILE=""
          KIND=""
          # 优先 workspace
          FILE=$(find . -name "*.xcworkspace" -type d | head -n 1 || true)
          if [ -n "$FILE" ]; then
            KIND="workspace"
          else
            FILE=$(find . -name "*.xcodeproj" -type d | head -n 1 || true)
            if [ -n "$FILE" ]; then
              KIND="project"
            fi
          fi
          if [ -z "$FILE" ]; then
            echo "❌ No .xcworkspace or .xcodeproj found."
            exit 1
          fi
          DIR=$(dirname "$FILE")
          echo "kind=$KIND" >> $GITHUB_OUTPUT
          echo "file=$FILE" >> $GITHUB_OUTPUT
          echo "dir=$DIR" >> $GITHUB_OUTPUT
          echo "Found $KIND: $FILE (dir: $DIR)"

      # 自动探测 Scheme（读取共享 scheme 的第一个）
      - name: Detect scheme
        id: scheme
        shell: bash
        run: |
          set -e
          cd "${{ steps.detect.outputs.dir }}"
          KIND="${{ steps.detect.outputs.kind }}"
          FILE_BASENAME="$(basename "${{ steps.detect.outputs.file }}")"

          if [ "$KIND" = "workspace" ]; then
            LIST_JSON=$(xcodebuild -workspace "$FILE_BASENAME" -list -json)
          else
            LIST_JSON=$(xcodebuild -project "$FILE_BASENAME" -list -json)
          fi

          # 用 python 解析第一个 Scheme 名（优先 sharedSchemes）
          SCHEME=$(python3 - <<'PY'
import json,sys
j=json.load(sys.stdin)
# Xcode 15/16 输出里 'workspace' 或 'project' 二选一
c = j.get('workspace') or j.get('project') or {}
schemes = c.get('schemes') or c.get('targets') or []
# 取第一个
print(schemes[0] if schemes else "")
PY
          <<< "$LIST_JSON")

          if [ -z "$SCHEME" ]; then
            echo "❌ No scheme found from xcodebuild -list."
            echo "$LIST_JSON"
            exit 1
          fi

          echo "name=$SCHEME" >> $GITHUB_OUTPUT
          echo "Detected scheme: $SCHEME"

      - name: Build (xcodebuild)
        env:
          CONFIGURATION: Release
        shell: bash
        run: |
          set -e
          cd "${{ steps.detect.outputs.dir }}"
          DERIVED_DIR="$RUNNER_TEMP/DerivedData"
          KIND="${{ steps.detect.outputs.kind }}"
          FILE_BASENAME="$(basename "${{ steps.detect.outputs.file }}")"
          SCHEME="${{ steps.scheme.outputs.name }}"

          COMMON_FLAGS=(
            CODE_SIGNING_ALLOWED=NO
            CODE_SIGNING_REQUIRED=NO
            CODE_SIGN_IDENTITY=""
            ONLY_ACTIVE_ARCH=NO
            ENABLE_HARDENED_RUNTIME=NO
            -configuration "${CONFIGURATION}"
            -scheme "${SCHEME}"
            -derivedDataPath "$DERIVED_DIR"
          )

          echo "Building scheme: $SCHEME"
          if [ "$KIND" = "workspace" ]; then
            xcodebuild -workspace "$FILE_BASENAME" "${COMMON_FLAGS[@]}" build
          else
            xcodebuild -project "$FILE_BASENAME" "${COMMON_FLAGS[@]}" build
          fi

          echo "DERIVED_DIR=$DERIVED_DIR" >> $GITHUB_ENV

      - name: Locate .app product
        id: findapp
        shell: bash
        run: |
          set -e
          APP_PATH="$(find "$DERIVED_DIR/Build/Products/Release" -maxdepth 4 -name '*.app' -print -quit)"
          if [ -z "$APP_PATH" ]; then
            echo "❌ No .app found under $DERIVED_DIR/Build/Products."
            find "$DERIVED_DIR/Build/Products" -maxdepth 4 -type d -print || true
            exit 1
          fi
          echo "app=$APP_PATH" >> $GITHUB_OUTPUT
          echo "Found app: $APP_PATH"

      - name: Zip app
        shell: bash
        run: |
          APP="${{ steps.findapp.outputs.app }}"
          cd "$(dirname "$APP")"
          zip -r "VoiceInk.app.zip" "$(basename "$APP")"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: VoiceInk.app
          path: |
            ${{ steps.findapp.outputs.app }}
            $(dirname ${{ steps.findapp.outputs.app }})/VoiceInk.app.zip
          if-no-files-found: error
